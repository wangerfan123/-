#ifndef BOARD_H
#define BOARD_H

#include <QFrame>
#include "Stone.h"
#include "Step.h"
#include <QVector>

class Board : public QFrame
{
    Q_OBJECT
public:
    explicit Board(QWidget *parent = 0);
    ~Board();

    /* game data */
    Stone _s[32];//使用自定义棋子类定义32颗棋子
    int _r;//棋子半径
    QPoint _off;//偏移值
    bool _bSide;//红边还是黑边

    QVector<Step*> _steps; //保存步数以便悔棋

    /* game status 游戏状态*/
    int _selectid;//走棋时选中的棋子
    bool _bRedTurn; //布尔类型，是否该红方走了
    void init(bool bRedSide);//摆起,参数控制红棋在上还是黑棋在上

    /* draw functions 绘制函数*/
    void paintEvent(QPaintEvent *);//绘制
    void drawPlate(QPainter& p);//绘制棋盘
    void drawPlace(QPainter& p);//绘制九宫
    void drawInitPosition(QPainter& p);//绘制初始位置
    void drawInitPosition(QPainter& p, int row, int col);
    void drawStone(QPainter& p);//绘制棋子
    void drawStone(QPainter& p, int id);

    /* function for coordinate 坐标转换函数*/
    QPoint center(int row, int col);//棋盘坐标和棋子坐标转换
    QPoint center(int id);
    QPoint topLeft(int row, int col);//获得左上角的坐标
    QPoint topLeft(int id);
    QRect cell(int row, int col);//获得格子
    QRect cell(int id);

    //确定点击到了
    bool getClickRowCol(QPoint pt, int& row, int& col);

    /* help function */
    QString name(int id);//获得名字
    bool red(int id);//判断阵营
    bool sameColor(int id1, int id2);//颜色是否相同
    int getStoneId(int row, int col);//得到棋子的id
    void killStone(int id);//将棋子杀掉
    void reliveStone(int id);//将棋子恢复
    void moveStone(int moveid, int row, int col);//移动棋子
    bool isDead(int id);//是否被吃

    /* move stone 鼠标控制棋子移动*/
    void mouseReleaseEvent(QMouseEvent *);//鼠标释放
    void click(QPoint pt);
    virtual void click(int id, int row, int col);
    void trySelectStone(int id);//尝试选择
    void tryMoveStone(int killid, int row, int col);//尝试移动
    void moveStone(int moveid, int killid, int row, int col);
    void saveStep(int moveid, int killid, int row, int col, QVector<Step*>& steps);
    void backOne();//悔棋一步
    void back(Step* step);
    virtual void back();//使用虚函数之后就会调用子类的函数而不是父类的

    /* rule 规则相关*/
    bool canMove(int moveid, int killid, int row, int col);
    bool canMoveChe(int moveid, int killid, int row, int col);
    bool canMoveMa(int moveid, int killid, int row, int col);
    bool canMovePao(int moveid, int killid, int row, int col);
    bool canMoveBing(int moveid, int killid, int row, int col);
    bool canMoveJiang(int moveid, int killid, int row, int col);
    bool canMoveShi(int moveid, int killid, int row, int col);
    bool canMoveXiang(int moveid, int killid, int row, int col);

    bool canSelect(int id);

    /* rule helper */
    int getStoneCountAtLine(int row1, int col1, int row2, int col2);
    int relation(int row1, int col1, int row, int col);
    bool isBottomSide(int id);

signals:

public slots:
    void slotBack();

};

#endif // BOARD_H
